@import 'helpers/variables.styl'
@import 'base/reset.styl'
@import 'base/fallbacks.styl'
@import 'helpers/mixins.styl'
@import 'base/typography.styl'
@import 'components/buttons.styl'
@import 'components/navigation.styl'
@import 'helpers/repeatables.styl'
@import 'components/defaults.styl'
@import 'layout/footer.styl'
@import 'layout/overlay.styl'
@import 'layout/forms.styl'
@import 'layout/header.styl'
@import 'layout/sidebars.styl'
@import 'pages/index.styl'


// ## EN - US ## 
// #############

// i tend to cite classes on several documents generally as follows: 
// generic properties go on more generic denominators and specifics go usually into their own page hierarchy 

// ie: (.has-icon) will be on defaults and contain all generic properties for reusability, i will then go to the specific 
// component that intends to use the class and extend their properties based on hierarchy for that HTML context (generally this means spacing, colors, sizes and this sort of stuff)

// documentation motherfucker, do you have it?

// REMEMBER TO READ HIERARCHY.MD ON SRC FOLDER!

// ## PT - BR ##
// #############

// eu costumo a citar classes em diversos documentos geralmente desta forma: 
// propriedades genéricas vão em denominadores mais genéricos e específicos vão geralmente dentro da hierarquia da sua  próripa pagina/componente

// Exempo: (.has-icon) vai estar no defaults ou equivalente de componente, vai conter todas propriedades genéricas para reusabilidade. eu então irei 
// para o componente específico que pretende utilizar a classe e extender suas propriedades baseado na hierarquia / contexto HTML. 
//  (geralmente isso inclui espaçamento, cores, tamanhos, esse tipo de coisa) 

// Documentação filho da puta, você a tem?

// LEMBRE-SE DE LER O HIERARCHY.MD NA PASTA SRC!